PLAY FAIR CIPHER
//*ENCRYPTION*//

import numpy as np
def create_matrix(key):
  #Remove any duplicate letters from the key
  a=dict.fromkeys(key)
  print(a)
  key = "".join(a)
  print(key)

  #Create the alphabet string, without the letters in the key
  alphabet = "ABCDEFGHJKLMNOPQRSTUVWXYZ"
  for letter in key:
    alphabet = alphabet.replace(letter, "")
    print(alphabet)

  #Concatenate the key and alphabet strings
  key_alphabet = key + alphabet
  print(key_alphabet)
  #Create a 5x5 matrix using the key and alphabet string
  matrix = np.array(list(key_alphabet)).reshape(5, 5)
  print(matrix)
  return matrix
plaintext = "HELLO WORLD"
key = "SECRETKEY"

#ciphertext = encrypt(plaintext, key)
ciphertext = create_matrix(key)

//*

def preprocess_text(plaintext):
    # Remove spaces and convert to uppercase
    plaintext = plaintext.replace(" "," ").upper()
    print(plaintext)

    #Replace any occurrences of 'J' with 'I'
    plaintext = plaintext.replace("J", "I")

    #Add an 'X' after any repeated letters
    for i in range(1, len(plaintext)):
      if plaintext[i] == plaintext[i-1]:
        plaintext = plaintext[:i] + "X" + plaintext[i:]
        
    #If the plaintext has an odd number of letters, add an 'X' at the end
    if len(plaintext) % 2 != 0:
     plaintext = plaintext + "X"

    return plaintext
print(preprocess_text(plaintext))

///*


def split_pairs(plaintext):
  # split the plaintext into pairs of letters
  pairs = []
  for i in range(0, len(plaintext), 2):
      pairs.append(plaintext[i:i+2])
  return pairs

print(split_pairs(plaintext))
