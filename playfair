PLAY FAIR CIPHER
//*ENCRYPTION*//
///*** WRITE THE PYTHON FUNCTION FOR MATRIX CREATION IN PLAYFAIR CIPHER ***///

import numpy as np
def create_matrix(key):
  #Remove any duplicate letters from the key
  a=dict.fromkeys(key)
  print(a)
  key = "".join(a)
  print(key)

  #Create the alphabet string, without the letters in the key
  alphabet = "ABCDEFGHJKLMNOPQRSTUVWXYZ"
  for letter in key:
    alphabet = alphabet.replace(letter, "")
    print(alphabet)

  #Concatenate the key and alphabet strings
  key_alphabet = key + alphabet
  print(key_alphabet)
  #Create a 5x5 matrix using the key and alphabet string
  matrix = np.array(list(key_alphabet)).reshape(5, 5)
  print(matrix)
  return matrix
plaintext = "HELLO WORLD"
key = "SECRETKEY"

#ciphertext = encrypt(plaintext, key)
ciphertext = create_matrix(key)

///
//** WRITE A PROGRAM IN  PYTHON  FOR PREPROCESSING  IN PLAYFAIR CIPHER **//

def preprocess_text(plaintext):
    # Remove spaces and convert to uppercase
    plaintext = plaintext.replace(" "," ").upper()
    print(plaintext)

    #Replace any occurrences of 'J' with 'I'
    plaintext = plaintext.replace("J", "I")

    #Add an 'X' after any repeated letters
    for i in range(1, len(plaintext)):
      if plaintext[i] == plaintext[i-1]:
        plaintext = plaintext[:i] + "X" + plaintext[i:]
        
    #If the plaintext has an odd number of letters, add an 'X' at the end
    if len(plaintext) % 2 != 0:
     plaintext = plaintext + "X"

    return plaintext
print(preprocess_text(plaintext))

///
//** WRITE A PROGRAM IN  PYTHON  SPLITTING THE PLAIN TEXT IN PAIRS **//

def split_pairs(plaintext):
  # split the plaintext into pairs of letters
  pairs = []
  for i in range(0, len(plaintext), 2):
      pairs.append(plaintext[i:i+2])
  return pairs
print(split_pairs(plaintext))


#playfair full code
import numpy as np

def create_matrix(key):

 # Remove any duplicate letters from the key

 key = "".join(dict.fromkeys(key))

 # Create the alphabet string, without the letters in the key

 alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"

 for letter in key:

 alphabet = alphabet.replace(letter, "")

 # Concatenate the key and alphabet strings

 key_alphabet = key + alphabet

 # Create a 5x5 matrix using the key and alphabet string

 matrix = np.array(list(key_alphabet)).reshape(5, 5)

 return matrix

def preprocess_text(plaintext):

 # Remove spaces and convert to uppercase

 plaintext = plaintext.replace(" ", "").upper()

 # Replace any occurrences of 'J' with 'I'

 plaintext = plaintext.replace("J", "I")

 # Add an 'X' after any repeated letters

 for i in range(1, len(plaintext)):

 if plaintext[i] == plaintext[i-1]:

 plaintext = plaintext[:i] + "X" + plaintext[i:]

 # If the plaintext has an odd number of letters, add an 'X' at the

end

 if len(plaintext) % 2 != 0:

 plaintext += "X"

 return plaintext

def split_pairs(plaintext):

 # Split the plaintext into pairs of letters

 pairs = []

 for i in range(0, len(plaintext), 2):

 pairs.append(plaintext[i:i+2])

 return pairs

def find_letter(matrix, letter):

 # Find the row and column of a letter in the matrix

 for i in range(5):

 for j in range(5):

 if matrix[i][j] == letter:

 return i, j

def encrypt_pair(matrix, pair):

 # Encrypt a pair of letters using the Playfair Cipher

 row1, col1 = find_letter(matrix, pair[0])

 row2, col2 = find_letter(matrix, pair[1])

 if row1 == row2:

 # If the letters are in the same row, replace each letter with

the letter to its right

 encrypted_pair = matrix[row1][(col1+1)%5] + matrix[row2]

[(col2+1)%5]

 elif col1 == col2:

 # If the letters are in the same column, replace each letter 

with the letter below it

 encrypted_pair = matrix[(row1+1)%5][col1] + matrix[(row2+1)%5]

[col2]

 else:

 # If the letters are not in the same row or column, form a 

rectangle with the two letters

 # and replace each letter with the letter at the opposite 

corner of the rectangle

 encrypted_pair = matrix[row1][col2] + matrix[row2][col1]

 return encrypted_pair

def encrypt(plaintext, key):

 matrix = create_matrix(key)

 plaintext = preprocess_text(plaintext)

 pairs = split_pairs(plaintext)

 encrypted_pairs = []

 for pair in pairs:

 encrypted_pair = encrypt_pair(matrix, pair)

 encrypted_pairs.append(encrypted_pair)

 ciphertext = "".join(encrypted_pairs)

 return ciphertext

plaintext = "HELLO WORLD"

key = "SECRETKEY"
ciphertext = encrypt(plaintext, key)

print(ciphertext)
